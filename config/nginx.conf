# app server
upstream qchat {
  server unix://$path/shared/tmp/sockets/thin.sock;
}

# http://(www.)? to https://
# also letsencrypt
server {
  listen 80;
  server_name qchat.io qchat.io;

  # for letsencrypt challenge
  location /.well-known/acme-challenge {
    alias /home/deploy/letsencrypt/.well-known/acme-challenge;
  }

  # redirect to ssl/tls non www
  location / {
    return 301 https://qchat.io$request_uri;
  }
}

# https://www. -> https://
server {
  listen 443 ssl;
  server_name www.qchat.io;

  # tls config
  include /home/deploy/apps/qchat/current/config/nginx.tls.conf;
  
  # redirect to non www
  return 301 https://qchat.io$request_uri; 
}

# ssl/tls config
server {
  listen 443 ssl;
  server_name qchat.io;

  set $path /home/deploy/apps/qchat/current;
 
  # tls config
  include $path/config/nginx.tls.conf;

  # log locations
  access_log $path/log/nginx.access.log;
  error_log  $path/log/nginx.error.log;

  # root location
  root $path/public;

  # First try for static, then hit the app server
  try_files $uri/index.html $uri @qchat;

  # Enable gzip for page content
  gzip on;

  # Enable gzip and caching for static assets
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
    add_header Last-Modified "";
    add_header ETag "";
    break;
  }

  # Proxying to app server
  location @qchat {
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect off;

    proxy_pass http://qchat;
  }

  # Internal server error
  error_page 500 502 503 504 /500.html;

  # For big uploads
  client_max_body_size 10M;

  # For slow connections
  keepalive_timeout 30s;
}

